{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Edit, X, Save, Bold, Italic, Underline, List, AlignLeft, AlignCenter, AlignRight } from 'lucide-react';\n\n// const NotesTab = ({ theme, notes, setNotes, darkMode }) => {\n//   const [editingNote, setEditingNote] = useState(null);\n//   const [editedContent, setEditedContent] = useState('');\n//   const [editedTitle, setEditedTitle] = useState('');\n//   const [selectedColor, setSelectedColor] = useState('#ffffff');\n\n//   const colorOptions = [\n//     { name: 'White', value: '#ffffff' },\n//     { name: 'Pastel Pink', value: '#ffcccb' },\n//     { name: 'Pastel Blue', value: '#ccf2ff' },\n//     { name: 'Pastel Yellow', value: '#ffffcc' },\n//     { name: 'Pastel Green', value: '#ccffcc' },\n//     { name: 'Pastel Purple', value: '#e6ccff' }\n//   ];\n\n//   // Load notes from localStorage when component mounts\n//   useEffect(() => {\n//     const savedNotes = localStorage.getItem('savedNotes');\n//     if (savedNotes) {\n//       setNotes(JSON.parse(savedNotes));\n//     }\n//   }, []);\n\n//   // Save notes to localStorage whenever they change\n//   useEffect(() => {\n//     localStorage.setItem('savedNotes', JSON.stringify(notes));\n//   }, [notes]);\n\n//   const openNoteEditor = (note, index) => {\n//     setEditingNote(index);\n//     setEditedContent(note.content || 'Click to view your notes for this passage...');\n//     setEditedTitle(note.title);\n//     setSelectedColor(note.color || '#ffffff');\n//   };\n\n//   const closeNoteEditor = () => {\n//     setEditingNote(null);\n//   };\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     updatedNotes[editingNote] = {\n//       ...updatedNotes[editingNote],\n//       title: editedTitle,\n//       content: editedContent,\n//       color: selectedColor\n//     };\n//     setNotes(updatedNotes);\n//     closeNoteEditor();\n//   };\n\n//   const applyFormatting = (command, value = null) => {\n//     document.execCommand(command, false, value);\n//     // Focus back on the content editable div after applying formatting\n//     document.querySelector('.notepad-container').focus();\n//   };\n\n//   return (\n//     <div className={`${theme.card} rounded shadow p-4`}>\n//       <h2 className=\"h4 fw-semibold mb-4\">Your Notes</h2>\n//       <div className=\"d-flex flex-column gap-3\">\n//         {notes.length > 0 ? (\n//           notes.map((note, index) => (\n//             <div \n//               key={index} \n//               className={`p-3 rounded`} \n//               style={{ \n//                 backgroundColor: note.color || (darkMode ? 'rgba(108, 117, 125, 0.25)' : '#f8f9fa')\n//               }}\n//             >\n//               <div className=\"d-flex justify-content-between align-items-start\">\n//                 <div>\n//                   <h3 className=\"fs-6 fw-medium mb-0\">{note.title}</h3>\n//                   <p className={`${theme.subtleText} small mb-0`}>{note.reference}</p>\n//                 </div>\n//                 <div className=\"d-flex flex-column align-items-end\">\n//                   <p className={`${theme.subtleText} small mb-1`}>{note.date}</p>\n//                   <div className=\"d-flex gap-1\">\n//                     <button \n//                       className={`btn btn-link ${theme.subtleText} p-1`}\n//                       onClick={() => openNoteEditor(note, index)}\n//                     >\n//                       <Edit size={16} />\n//                     </button>\n//                     <button \n//                       className={`btn btn-link ${theme.subtleText} p-1`}\n//                       onClick={() => setNotes(notes.filter((_, i) => i !== index))}\n//                     >\n//                       <X size={16} />\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//               <p className=\"mt-2 small mb-0\">\n//                 {note.content || \"Click to view your notes for this passage...\"}\n//               </p>\n//             </div>\n//           ))\n//         ) : (\n//           <p className=\"text-center py-4\">No notes yet. Add some from the home page!</p>\n//         )}\n//       </div>\n\n//       {/* Note Editor Modal */}\n//       {editingNote !== null && (\n//         <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\" style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 1050 }}>\n//           <div className={`${darkMode ? 'bg-dark' : 'bg-white'} rounded-3 shadow-lg p-0 m-3`} style={{ width: '90%', maxWidth: '800px', maxHeight: '90vh', overflow: 'hidden' }}>\n//             <div className=\"d-flex justify-content-between align-items-center border-bottom p-3\">\n//               <h3 className=\"fs-5 fw-semibold mb-0\">Edit Note</h3>\n//               <button \n//                 className=\"btn btn-link text-secondary border-0 p-1\"\n//                 onClick={closeNoteEditor}\n//               >\n//                 <X size={20} />\n//               </button>\n//             </div>\n\n//             <div className=\"p-3\">\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Title</label>\n//                 <input \n//                   type=\"text\" \n//                   className={`form-control ${darkMode ? 'bg-dark text-light' : ''}`}\n//                   value={editedTitle}\n//                   onChange={(e) => setEditedTitle(e.target.value)}\n//                 />\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Note Color</label>\n//                 <div className=\"d-flex gap-2 flex-wrap mb-2\">\n//                   {colorOptions.map((color) => (\n//                     <button\n//                       key={color.value}\n//                       className={`btn p-0 rounded-circle ${selectedColor === color.value ? 'border border-3 border-primary' : 'border'}`}\n//                       style={{ \n//                         backgroundColor: color.value, \n//                         width: '32px', \n//                         height: '32px',\n//                         cursor: 'pointer'\n//                       }}\n//                       onClick={() => setSelectedColor(color.value)}\n//                       title={color.name}\n//                     />\n//                   ))}\n//                 </div>\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Format</label>\n//                 <div className={`btn-group mb-2 ${darkMode ? 'btn-group-dark' : ''}`}>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('bold')}>\n//                     <Bold size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('italic')}>\n//                     <Italic size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('underline')}>\n//                     <Underline size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('insertUnorderedList')}>\n//                     <List size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyLeft')}>\n//                     <AlignLeft size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyCenter')}>\n//                     <AlignCenter size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyRight')}>\n//                     <AlignRight size={16} />\n//                   </button>\n//                 </div>\n//               </div>\n\n//               <style>\n//                 {`\n//                   .notepad-container {\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container p {\n//                     margin: 0;\n//                     line-height: 28px;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container div {\n//                     margin: 0;\n//                     line-height: 28px;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container * {\n//                     margin-top: 0;\n//                     margin-bottom: 0;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                 `}\n//               </style>\n\n//               <div \n//                 className={`form-control ${darkMode ? 'bg-dark text-light' : ''} notepad-container`}\n//                 style={{ \n//                   minHeight: '200px', \n//                   backgroundColor: selectedColor,\n//                   backgroundImage: 'linear-gradient(transparent, transparent 27px, #ccc 27px, #ccc 28px, transparent 28px)',\n//                   backgroundSize: '100% 28px',\n//                   backgroundPosition: '0 14px',\n//                   lineHeight: '28px',\n//                   paddingTop: '14px',\n//                   paddingLeft: '20px',\n//                   paddingRight: '20px',\n//                   resize: 'vertical',\n//                   boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n//                   border: '1px solid #ddd',\n//                   borderRadius: '8px',\n//                   fontFamily: '\"Roboto\", sans-serif',\n//                   fontSize: '16px',\n//                   direction: 'ltr',\n//                   textAlign: 'left'\n//                 }}\n//                 contentEditable\n//                 dangerouslySetInnerHTML={{ __html: editedContent }}\n//                 onInput={(e) => setEditedContent(e.currentTarget.innerHTML)}\n//               />\n//             </div>\n\n//             <div className=\"d-flex justify-content-end gap-2 p-3 border-top\">\n//               <button \n//                 className=\"btn btn-secondary\"\n//                 onClick={closeNoteEditor}\n//               >\n//                 Cancel\n//               </button>\n//               <button \n//                 className=\"btn btn-primary\"\n//                 onClick={saveNote}\n//               >\n//                 <Save size={16} className=\"me-2\" />\n//                 Save Note\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default NotesTab;","map":{"version":3,"names":[],"sources":["/home/merval/projet perso/bible/BibleSnap/dailyverse/src/components/NotesTab.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Edit, X, Save, Bold, Italic, Underline, List, AlignLeft, AlignCenter, AlignRight } from 'lucide-react';\n\n// const NotesTab = ({ theme, notes, setNotes, darkMode }) => {\n//   const [editingNote, setEditingNote] = useState(null);\n//   const [editedContent, setEditedContent] = useState('');\n//   const [editedTitle, setEditedTitle] = useState('');\n//   const [selectedColor, setSelectedColor] = useState('#ffffff');\n  \n//   const colorOptions = [\n//     { name: 'White', value: '#ffffff' },\n//     { name: 'Pastel Pink', value: '#ffcccb' },\n//     { name: 'Pastel Blue', value: '#ccf2ff' },\n//     { name: 'Pastel Yellow', value: '#ffffcc' },\n//     { name: 'Pastel Green', value: '#ccffcc' },\n//     { name: 'Pastel Purple', value: '#e6ccff' }\n//   ];\n\n//   // Load notes from localStorage when component mounts\n//   useEffect(() => {\n//     const savedNotes = localStorage.getItem('savedNotes');\n//     if (savedNotes) {\n//       setNotes(JSON.parse(savedNotes));\n//     }\n//   }, []);\n\n//   // Save notes to localStorage whenever they change\n//   useEffect(() => {\n//     localStorage.setItem('savedNotes', JSON.stringify(notes));\n//   }, [notes]);\n\n//   const openNoteEditor = (note, index) => {\n//     setEditingNote(index);\n//     setEditedContent(note.content || 'Click to view your notes for this passage...');\n//     setEditedTitle(note.title);\n//     setSelectedColor(note.color || '#ffffff');\n//   };\n\n//   const closeNoteEditor = () => {\n//     setEditingNote(null);\n//   };\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     updatedNotes[editingNote] = {\n//       ...updatedNotes[editingNote],\n//       title: editedTitle,\n//       content: editedContent,\n//       color: selectedColor\n//     };\n//     setNotes(updatedNotes);\n//     closeNoteEditor();\n//   };\n\n//   const applyFormatting = (command, value = null) => {\n//     document.execCommand(command, false, value);\n//     // Focus back on the content editable div after applying formatting\n//     document.querySelector('.notepad-container').focus();\n//   };\n\n//   return (\n//     <div className={`${theme.card} rounded shadow p-4`}>\n//       <h2 className=\"h4 fw-semibold mb-4\">Your Notes</h2>\n//       <div className=\"d-flex flex-column gap-3\">\n//         {notes.length > 0 ? (\n//           notes.map((note, index) => (\n//             <div \n//               key={index} \n//               className={`p-3 rounded`} \n//               style={{ \n//                 backgroundColor: note.color || (darkMode ? 'rgba(108, 117, 125, 0.25)' : '#f8f9fa')\n//               }}\n//             >\n//               <div className=\"d-flex justify-content-between align-items-start\">\n//                 <div>\n//                   <h3 className=\"fs-6 fw-medium mb-0\">{note.title}</h3>\n//                   <p className={`${theme.subtleText} small mb-0`}>{note.reference}</p>\n//                 </div>\n//                 <div className=\"d-flex flex-column align-items-end\">\n//                   <p className={`${theme.subtleText} small mb-1`}>{note.date}</p>\n//                   <div className=\"d-flex gap-1\">\n//                     <button \n//                       className={`btn btn-link ${theme.subtleText} p-1`}\n//                       onClick={() => openNoteEditor(note, index)}\n//                     >\n//                       <Edit size={16} />\n//                     </button>\n//                     <button \n//                       className={`btn btn-link ${theme.subtleText} p-1`}\n//                       onClick={() => setNotes(notes.filter((_, i) => i !== index))}\n//                     >\n//                       <X size={16} />\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//               <p className=\"mt-2 small mb-0\">\n//                 {note.content || \"Click to view your notes for this passage...\"}\n//               </p>\n//             </div>\n//           ))\n//         ) : (\n//           <p className=\"text-center py-4\">No notes yet. Add some from the home page!</p>\n//         )}\n//       </div>\n\n//       {/* Note Editor Modal */}\n//       {editingNote !== null && (\n//         <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\" style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 1050 }}>\n//           <div className={`${darkMode ? 'bg-dark' : 'bg-white'} rounded-3 shadow-lg p-0 m-3`} style={{ width: '90%', maxWidth: '800px', maxHeight: '90vh', overflow: 'hidden' }}>\n//             <div className=\"d-flex justify-content-between align-items-center border-bottom p-3\">\n//               <h3 className=\"fs-5 fw-semibold mb-0\">Edit Note</h3>\n//               <button \n//                 className=\"btn btn-link text-secondary border-0 p-1\"\n//                 onClick={closeNoteEditor}\n//               >\n//                 <X size={20} />\n//               </button>\n//             </div>\n            \n//             <div className=\"p-3\">\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Title</label>\n//                 <input \n//                   type=\"text\" \n//                   className={`form-control ${darkMode ? 'bg-dark text-light' : ''}`}\n//                   value={editedTitle}\n//                   onChange={(e) => setEditedTitle(e.target.value)}\n//                 />\n//               </div>\n              \n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Note Color</label>\n//                 <div className=\"d-flex gap-2 flex-wrap mb-2\">\n//                   {colorOptions.map((color) => (\n//                     <button\n//                       key={color.value}\n//                       className={`btn p-0 rounded-circle ${selectedColor === color.value ? 'border border-3 border-primary' : 'border'}`}\n//                       style={{ \n//                         backgroundColor: color.value, \n//                         width: '32px', \n//                         height: '32px',\n//                         cursor: 'pointer'\n//                       }}\n//                       onClick={() => setSelectedColor(color.value)}\n//                       title={color.name}\n//                     />\n//                   ))}\n//                 </div>\n//               </div>\n              \n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Format</label>\n//                 <div className={`btn-group mb-2 ${darkMode ? 'btn-group-dark' : ''}`}>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('bold')}>\n//                     <Bold size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('italic')}>\n//                     <Italic size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('underline')}>\n//                     <Underline size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('insertUnorderedList')}>\n//                     <List size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyLeft')}>\n//                     <AlignLeft size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyCenter')}>\n//                     <AlignCenter size={16} />\n//                   </button>\n//                   <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => applyFormatting('justifyRight')}>\n//                     <AlignRight size={16} />\n//                   </button>\n//                 </div>\n//               </div>\n              \n//               <style>\n//                 {`\n//                   .notepad-container {\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container p {\n//                     margin: 0;\n//                     line-height: 28px;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container div {\n//                     margin: 0;\n//                     line-height: 28px;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                   .notepad-container * {\n//                     margin-top: 0;\n//                     margin-bottom: 0;\n//                     direction: ltr;\n//                     text-align: left;\n//                   }\n//                 `}\n//               </style>\n              \n//               <div \n//                 className={`form-control ${darkMode ? 'bg-dark text-light' : ''} notepad-container`}\n//                 style={{ \n//                   minHeight: '200px', \n//                   backgroundColor: selectedColor,\n//                   backgroundImage: 'linear-gradient(transparent, transparent 27px, #ccc 27px, #ccc 28px, transparent 28px)',\n//                   backgroundSize: '100% 28px',\n//                   backgroundPosition: '0 14px',\n//                   lineHeight: '28px',\n//                   paddingTop: '14px',\n//                   paddingLeft: '20px',\n//                   paddingRight: '20px',\n//                   resize: 'vertical',\n//                   boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n//                   border: '1px solid #ddd',\n//                   borderRadius: '8px',\n//                   fontFamily: '\"Roboto\", sans-serif',\n//                   fontSize: '16px',\n//                   direction: 'ltr',\n//                   textAlign: 'left'\n//                 }}\n//                 contentEditable\n//                 dangerouslySetInnerHTML={{ __html: editedContent }}\n//                 onInput={(e) => setEditedContent(e.currentTarget.innerHTML)}\n//               />\n//             </div>\n            \n//             <div className=\"d-flex justify-content-end gap-2 p-3 border-top\">\n//               <button \n//                 className=\"btn btn-secondary\"\n//                 onClick={closeNoteEditor}\n//               >\n//                 Cancel\n//               </button>\n//               <button \n//                 className=\"btn btn-primary\"\n//                 onClick={saveNote}\n//               >\n//                 <Save size={16} className=\"me-2\" />\n//                 Save Note\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default NotesTab;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}